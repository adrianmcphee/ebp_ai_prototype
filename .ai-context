# EBP AI Banking Capabilities - Project Context

## Overview
Research prototype exploring AI enhancements for Backbase Enterprise Banking Platform (EBP) with focus on navigation assistance, transaction assistance, and MCP integration for AI agents.

## Core Capabilities
- **Intent Classification**: 34 comprehensive banking intents across 5 categories with risk assessment (LOW/MEDIUM/HIGH/CRITICAL)
- **Banking Operations Catalog**: 15+ operations mapped to intents with business rules and execution handlers
- **Entity Extraction**: Smart parsing with validation (amounts, accounts, recipients, dates)
- **Multi-turn Conversations**: Context persistence, reference resolution, missing info handling
- **Risk & Authentication**: Automatic auth escalation based on transaction risk
- **MCP Integration**: Expose banking operations to AI assistants via Model Context Protocol

## Documentation
- **[📋 TODO & Progress Tracker](./TODO.md)** - Current development status and roadmap
- **[🏗️ System Architecture](./ARCHITECTURE.md)** - Comprehensive technical architecture guide
- **[📖 Intent System](./INTENT_SYSTEM.md)** - Detailed intent catalog and classification system

## Architecture

### Key Modules (`backend/src/`)
- `api.py` - FastAPI REST endpoints with WebSocket support
- `pipeline.py` - Intent processing orchestration with multi-turn support
- `intent_classifier.py` - Banking intent classification with confidence scoring
- `entity_extractor.py` - Extract & validate entities from natural language
- `context_aware_responses.py` - Generate intelligent contextual responses
- `state_manager.py` - Manage conversation state across turns
- `banking_operations.py` - **NEW** Banking Operations Catalog with 15+ operations
- `mock_banking.py` - Simulated banking service with comprehensive operations
- `mcp_server.py` - MCP protocol server for AI agents
- `llm_wrapper.py` - LLM abstraction supporting mock/OpenAI/Anthropic

### Project Structure
```
ebpnlp/
├── Makefile              # Workflow automation (make help for commands)
├── TODO.md               # Progress tracker and development roadmap
├── ARCHITECTURE.md       # Comprehensive system architecture guide
├── test-data.json        # Centralized test data (34 scenarios, 8 MCP tools)
├── backend/
│   ├── src/              # Core modules (FastAPI + Python)
│   │   └── banking_operations.py  # NEW: Operations catalog
│   ├── tests/            # Comprehensive test suite
│   │   └── test_mcp_comprehensive.py  # NEW: Full system tests
│   └── scripts/          # Utility scripts
├── frontend/             # React 19 + Vite + Mantine UI (modern stack)
└── e2e/                  # Playwright E2E tests (with data-testid)
```

## Quick Start
```bash
make setup               # Install dependencies
./start-app.sh          # Start full application (frontend + backend)
make api                # Start API server (http://localhost:8000)
make frontend           # Start frontend (http://localhost:3001)
make mcp                # Start MCP server for Claude Desktop
make test               # Run all tests
make test-mcp-comprehensive  # Run comprehensive MCP tests
```

## Banking Operations & Risk Levels
| Operation Type | Examples | Risk | Auth Required |
|---------------|----------|------|---------------|
| Account Info | Balance check, statements | LOW | BASIC |
| Internal Transfer | Between own accounts | MEDIUM | FULL |
| External Transfer | Wire transfers | HIGH | CHALLENGE |
| P2P Payments | Zelle, Venmo | MEDIUM | FULL |
| Card Operations | Block/unblock | HIGH | FULL |
| Disputes | Fraud reports | HIGH | FULL |

## Development

### Running the Application
```bash
./start-app.sh         # Start both frontend and backend
make start             # Alternative startup command
make api               # Backend only
make frontend          # Frontend only
make mcp               # MCP server for Claude Desktop
```

### Running Demos
```bash
make demo-basic         # Intent classification & entities
make demo-conversation  # Multi-turn dialogs
make demo-risk         # Risk assessment
make demo-providers    # Test LLM providers
```

### Testing
```bash
make test                    # All tests
make test-unit              # Unit tests only  
make test-mcp-comprehensive # Comprehensive MCP system tests
cd e2e && npx playwright test  # E2E tests
make lint                   # Code quality check
make format                 # Auto-fix formatting
```

### Environment Variables
```bash
# Required (defaults to mock if not set)
LLM_PROVIDER=mock|openai|anthropic
DATABASE_URL=postgresql://... or mock
REDIS_URL=redis://... or mock

# Optional API Keys
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
```

## Key Design Decisions

1. **Mock-First Development**: All components have mock implementations for testing without dependencies
2. **Provider Flexibility**: Supports multiple LLM providers with automatic fallback
3. **Risk-Based Auth**: Authentication requirements scale with operation risk
4. **Stateful Conversations**: Redis-backed session management for context persistence
5. **MCP Protocol**: Enables AI assistants to directly execute banking operations

## Testing Strategy
- **Unit Tests**: Mock all external dependencies
- **Integration Tests**: Test pipeline with mock services
- **E2E Tests**: Playwright for full user flows
- **Performance Tests**: Ensure <500ms response times

## Security Considerations
- No real banking operations (mock service only)
- API keys via environment variables only
- Rate limiting on all endpoints
- Input validation and sanitization
- Risk assessment before operation execution

## MCP Integration
Exposes 8 banking tools to AI assistants:
- check_account_balance
- transfer_between_accounts
- send_p2p_payment
- get_transaction_history
- block_card
- dispute_transaction
- get_account_info
- search_help

Configure in Claude Desktop's config to enable banking operations via natural language.

## Common Tasks

### Add New Intent
1. Update `intent_catalog.py` with intent definition in BANKING_INTENTS dict
2. Add test cases in `test_intent_classifier.py`
3. Update entity extraction rules if needed
4. See [INTENT_SYSTEM.md](INTENT_SYSTEM.md) for detailed instructions

### Add New Banking Operation
1. Add operation to `banking_operations.py` BankingOperationsCatalog
2. Implement execution handler in the catalog
3. Map intent to operation in `get_operation_for_intent()`
4. Update `mock_banking.py` if new service methods needed
5. Add MCP tool in `mcp_server.py` if external access required
6. Add tests to `test_mcp_comprehensive.py`

### Debug Issues
```bash
# Check logs
make api  # Verbose API logs

# Run specific test
cd backend && python -m pytest tests/test_mcp_comprehensive.py -v

# Test API directly
curl -X POST http://localhost:8000/api/process \
  -H "Content-Type: application/json" \
  -d '{"query": "What is my checking account balance?", "session_id": "test123"}'

# Check current app status
./start-app.sh  # Shows frontend and backend URLs
```

## Performance Targets
- Intent classification: <200ms
- Entity extraction: <300ms  
- Full pipeline: <500ms
- API response: <1s including network

## Current Development Status
See **[📋 TODO.md](./TODO.md)** for detailed development status, progress tracking, and current issues.

## Future Enhancements
- UI Navigation Catalog (Phase 2)
- Real banking API integration (currently mock only)
- Advanced fraud detection
- Multilingual support
- Voice interface
- Biometric authentication simulation
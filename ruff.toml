# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "C4", # flake8-comprehensions
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]

ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line (conflicts with D213)
    "D213", # Multi-line docstring summary should start at the second line (conflicts with D212)
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation point
    "E501", # Line too long (black handles this)
    "E722", # Do not use bare except (sometimes needed for robustness)
    "A003", # Class attribute shadows builtin (id is common in database models)
    "B019", # functools.cache on methods can lead to memory leaks (acceptable risk)
    "B904", # Within except clause, raise with from (sometimes not needed)
    "PLR0911", # Too many return statements (acceptable for complex logic)
    "PLR0912", # Too many branches (acceptable for complex validation)
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements (acceptable for complex functions)
    "PLR2004", # Magic value used in comparison
    "PLW0603", # Using global statement (needed for FastAPI app initialization)
    "RET504", # Unnecessary assignment before return (improves readability)
    "RET505", # Unnecessary elif after return (improves readability)
    "RUF001", # String contains ambiguous character (acceptable for UI symbols)
    "SIM102", # Use single if instead of nested (nested can be clearer)
    "SIM108", # Use ternary operator (explicit if/else can be clearer)
    "SIM114", # Combine if branches using logical or (separate can be clearer)
    "SLF001", # Private member accessed (needed for some framework integrations)
    "T201", # print found (used in demos and debugging)
    "TRY002", # Create your own exception (built-in exceptions are fine)
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY200", # Use raise from to specify exception cause (sometimes not needed)
    "TRY300", # Consider moving to else block (current structure is clearer)
    "TRY400", # Use logging.exception instead of logging.error (not always appropriate)
    "UP007", # Use X | Y for type annotations (keeping Union for Python 3.9 compatibility)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[lint.mccabe]
max-complexity = 10

[lint.isort]
known-first-party = ["src"]

[lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "S106", "ARG001", "D", "ANN"]
"demo_*.py" = ["T201", "D", "PLR0915"]  # Allow print statements in demos
"*/__init__.py" = ["D104", "F401"]  # Allow unused imports in __init__ files
"backend/src/api.py" = ["ARG001"]  # FastAPI dependency injection patterns
"backend/src/llm_*.py" = ["ARG002", "ARG005", "F401"]  # LLM wrapper patterns with unused args and optional imports
"backend/src/mock_*.py" = ["ARG002"]  # Mock implementations with unused parameters
"backend/src/config.py" = ["UP007"]  # Pydantic settings use older Union syntax
"backend/src/database.py" = ["ARG002"]  # Database interface with unused mock parameters
"backend/src/entity_extractor.py" = ["ARG002"]  # Entity extraction with unused context parameters
"backend/src/context_aware_responses.py" = ["ARG002"]  # Response generation with unused context parameters
"backend/src/pipeline.py" = ["ARG002"]  # Pipeline with unused parameters for future extension
"backend/src/validator.py" = ["ARG002"]  # Validation with unused context parameters
"backend/src/state_manager.py" = ["ARG005"]  # State manager with unused lambda arguments

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"